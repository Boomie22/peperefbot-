import telebot
import requests
import cv2
from pyzbar.pyzbar import decode
import numpy as np
import os
import time
import threading

TOKEN = os.getenv("BOT_TOKEN")  # Your bot token
API_URL = "https://peperefbot.onrender.com/api/confirm_click"  # API to confirm stories
bot = telebot.TeleBot(TOKEN)

# üîπ Store active story verifications
ACTIVE_STORIES = {}  # { chat_id: { "message_id": int, "story_id": str, "expires_at": timestamp } }


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    """ Handles a forwarded story and verifies its QR code. """

    # Ensure this is a forwarded message
    if not message.forward_date:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é, –∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é!")
        return

    # **1Ô∏è‚É£ Get the photo file info**
    file_info = bot.get_file(message.photo[-1].file_id)
    file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}"

    # **2Ô∏è‚É£ Download the image**
    response = requests.get(file_url)
    image_path = f"temp/{message.chat.id}.jpg"
    os.makedirs("temp", exist_ok=True)

    with open(image_path, 'wb') as f:
        f.write(response.content)

    # **3Ô∏è‚É£ Decode the QR code**
    img = cv2.imread(image_path)
    qr_codes = decode(img)

    if not qr_codes:
        bot.send_message(message.chat.id, "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!")
        return

    qr_data = qr_codes[0].data.decode("utf-8")

    # **4Ô∏è‚É£ Extract `story_id` from QR code**
    if "story_id=" in qr_data:
        story_id = qr_data.split("story_id=")[-1]

        # **5Ô∏è‚É£ Check if the story exists in the database**
        response = requests.get(f"{API_URL}?story_id={story_id}")
        data = response.json()

        if data.get("success"):
            bot.send_message(message.chat.id, "‚úÖ –°—Ç–æ—Ä–∏—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞–µ–º 8-—á–∞—Å–æ–≤–æ–π —Ç–∞–π–º–µ—Ä.")
            
            # **6Ô∏è‚É£ Store the verification details**
            expires_at = time.time() + 8 * 3600  # 8 hours from now
            ACTIVE_STORIES[message.chat.id] = {
                "message_id": message.message_id,
                "story_id": story_id,
                "expires_at": expires_at
            }

        else:
            bot.send_message(message.chat.id, "‚ö† –≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
    else:
        bot.send_message(message.chat.id, "‚ö† QR-–∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É!")


# ‚úÖ **Step 2: Periodic Check to Ensure Story Still Exists**
def periodic_check():
    while True:
        current_time = time.time()
        for chat_id, data in list(ACTIVE_STORIES.items()):
            if current_time >= data["expires_at"]:
                bot.send_message(chat_id, "‚úÖ –°—Ç–æ—Ä–∏—Å –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ 8 —á–∞—Å–æ–≤ –∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üéâ")
                del ACTIVE_STORIES[chat_id]  # Remove from active tracking
            else:
                # üîπ Try checking if the forwarded message still exists
                try:
                    bot.forward_message(chat_id, chat_id, data["message_id"])
                    print(f"‚úÖ Story still exists for chat_id {chat_id}")
                except Exception:
                    bot.send_message(chat_id, "‚ö† –í–∞—à–∞ —Å—Ç–æ—Ä–∏—Å —É–¥–∞–ª–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    del ACTIVE_STORIES[chat_id]  # Remove from active tracking

        time.sleep(3600)  # üîÑ Check every hour


# ‚úÖ **Start the periodic check in the background**
threading.Thread(target=periodic_check, daemon=True).start()

bot.polling()
