from fastapi import FastAPI, Query, Body
from pydantic import BaseModel
import uuid
from datetime import datetime, timedelta

app = FastAPI()

# –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏–º –Ω–∞ Postgres –ø–æ–∑–∂–µ)
REF_DB = {}  # –•—Ä–∞–Ω–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ ID
STORY_DB = {}  # –•—Ä–∞–Ω–∏–º —Å—Ç–æ—Ä–∏—Å —Å –∏—Ö ID –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

class RefData(BaseModel):
    ref_id: str
    username: str

@app.post("/api/save_ref")
def save_ref(data: RefData):
    """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID """
    REF_DB[data.ref_id] = {"username": data.username, "verified": False}
    return {"success": True, "message": f"–†–µ—Ñ ID {data.ref_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è @{data.username}"}

@app.get("/api/stories/generate")
def generate_story(ref_id: str = Query(...), username: str = Query(...)):
    """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å QR-–∫–æ–¥–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ref_id –≤ –±–∞–∑–µ """
    
    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ ID –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Ç–µ—Ä—è–ª—Å—è
    REF_DB[ref_id] = {"username": username, "verified": False}
    STORY_DB[ref_id] = {"username": username, "timestamp": datetime.now()}

    backend_url = "https://peperefbot.onrender.com"

    html_template = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Telegram Story</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                text-align: center;
                background-color: white;
                margin: 0;
                padding: 0;
            }}
            .story-container {{
                position: relative;
                width: 1080px;
                height: 1920px;
                background: url('https://source.unsplash.com/random/1080x1920') no-repeat center center;
                background-size: cover;
            }}
            .qr-code {{
                position: absolute;
                bottom: 20px;
                right: 20px;
                width: 80px;
                height: 80px;
                opacity: 0.2;
            }}
        </style>
    </head>
    <body>
        <div class="story-container">
            <img src="https://api.qrserver.com/v1/create-qr-code/?size=80x80&data={backend_url}/api/confirm_click?ref_id={ref_id}" class="qr-code" alt="QR Code">
        </div>
    </body>
    </html>
    """
    return html_template

@app.get("/api/check_story")
def check_story(username: str = Query(...)):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ —Å—Ç–æ—Ä–∏—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ """
    print(f"üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ—Ä–∏—Å –¥–ª—è: {username}")  # –õ–æ–≥–∏—Ä—É–µ–º
    for ref_id, data in STORY_DB.items():
        if data["username"] == username:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–æ—Ä–∏—Å –¥–ª—è {username}")  # –õ–æ–≥–∏—Ä—É–µ–º
            return {"success": True, "message": "–°—Ç–æ—Ä–∏—Å –Ω–∞–π–¥–µ–Ω–∞ ‚úÖ"}
    print(f"‚ùå –°—Ç–æ—Ä–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {username}")  # –õ–æ–≥–∏—Ä—É–µ–º
    return {"success": False, "message": "–°—Ç–æ—Ä–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå"}
